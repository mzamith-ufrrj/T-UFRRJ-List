################################################################################
#
#
#  Universidade Federal Rural do Rio de Janeiro
#  Instituto Multidisciplinar - Departamento de Ciencia da Computacao
#  por: Marcelo Zamith - zamith.marcelo@gmail.com
#  para compilar com target release use o comando: make target=release + rápido
#
#  versão de on-ramp
#
################################################################################
EXEFILE      = ../TModelCA++
LIBFILE      = ../libTModelCA++.so
APPLICATION  = -D_APPLICATION=\"$(EXEFILE)\"
#CPUCC       = /opt/intel/bin/icpc
#CPUCC       = g++ #/opt/gnu-gcc/bin/g++
#CPUCC       = /home/mzamith/Apps/gcc/bin/g++
CPUCC       = g++
CPPFLAGS    = --std=c++11 -m64 -Wno-reorder #     -Wunused-variable #-Wno-conversion-null -Wdelete-non-virtual-dtor
DEFS        = $(APPLICATION)  $(VERSION) -DALIGN=64
INCLUDES    =
LIBDIR      =
#LIBDIR      = -L/opt/gnu-gcc/lib64
LIBS     =  -lm
LINK     =  $(LIBDIR) $(LIBS)
CPU_COMPILE = $(CPUCC) $(DEFS) $(INCLUDES) $(CPPFLAGS)

ifeq ($(target), release)
  DEFS      +=
  CPPFLAGS  +=      -O2
else
  DEFS     += -D_DEBUG
  CPPFLAGS += -g -Wall -O0
endif

all: exec lib

exec:	Grid 		          	\
	 	TModel                  \
	 	CellularAutomata        \
		Statistic               \
        MovementSensor	     	\
		Entity 		            \
		Configure               \
		main

	$(CPU_COMPILE)  obj/Grid.o             \
			        obj/TModel.o           \
			        obj/CellularAutomata.o \
			        obj/Statistic.o   \
			        obj/MovementSensor.o   \
			        obj/Entity.o           \
			        obj/Configure.o        \
			        obj/main.o             \
	$(LINK) -o $(EXEFILE)

main:
	$(CPU_COMPILE) -c main.cpp -o obj/main.o

Configure:
	$(CPU_COMPILE) -c Configure.cpp -o obj/Configure.o

CellularAutomata:
	$(CPU_COMPILE) -c CellularAutomata.cpp -o obj/CellularAutomata.o

TModel:
	$(CPU_COMPILE) -c TModel.cpp -o obj/TModel.o

Grid:
	$(CPU_COMPILE) -c Grid.cpp -o obj/Grid.o

Entity:
	$(CPU_COMPILE) -c Entity.cpp -o obj/Entity.o

MovementSensor:
	$(CPU_COMPILE) -c MovementSensor.cpp -o obj/MovementSensor.o

Statistic:
	$(CPU_COMPILE) -c Statistic.cpp -o obj/Statistic.o
#lIB
lib:	lGrid 		         \
	 	lTModel              \
	 	lCellularAutomata 	 \
        lMovementSensor		 \
		lStatistic           \
		lEntity 	         \
		lConfigure           \
		buildlib

buildlib:
	$(CPU_COMPILE) -shared  -Wl,-soname,$(LIBFILE)  -o $(LIBFILE) \
			       obj/lGrid.o             \
				   obj/lTModel.o           \
				   obj/lCellularAutomata.o \
				   obj/lStatistic.o        \
				   obj/lMovementSensor.o   \
				   obj/lEntity.o           \
				   obj/lConfigure.o


lConfigure:
	$(CPU_COMPILE) -fPIC -c Configure.cpp -o obj/lConfigure.o

lCellularAutomata:
	$(CPU_COMPILE) -fPIC -c CellularAutomata.cpp -o obj/lCellularAutomata.o

lTModel:
	$(CPU_COMPILE) -fPIC -c TModel.cpp -o obj/lTModel.o

lGrid:
	$(CPU_COMPILE) -fPIC -c Grid.cpp -o obj/lGrid.o

lEntity:
	$(CPU_COMPILE) -fPIC -c Entity.cpp -o obj/lEntity.o

lMovementSensor:
	$(CPU_COMPILE) -fPIC -c MovementSensor.cpp -o obj/lMovementSensor.o

lStatistic:
	$(CPU_COMPILE) -fPIC -c Statistic.cpp -o obj/lStatistic.o

clean:
	rm obj/*.o

files:
	rm *.txt; rm *.dat; rm obj/*.o
